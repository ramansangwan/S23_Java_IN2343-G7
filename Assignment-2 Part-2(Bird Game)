import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class BirdGame extends JFrame {
    private final int WINDOW_WIDTH = 800;
    private final int WINDOW_HEIGHT = 600;
    private final int BIRD_SIZE = 40;
    private final int BREAD_SIZE = 40; // Increased bread size for better gameplay
    private final int BUCKET_WIDTH = 80;
    private final int BUCKET_HEIGHT = 100;
    private final int HAPPY_POINTS_PER_BREAD = 10;

    private List<Point> birds;
    private Point breadPosition;
    private Point bucketPosition;
    private int happyPoints;
    private int lives;
    private int currentLevel;
    private Image birdImage;
    private Image breadImage;
    private Image bucketImage;

    public BirdGame() {
        setTitle("Bird Game");
        setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
        birds = new ArrayList<>();
        breadPosition = new Point(-100, -100);
        bucketPosition = new Point(WINDOW_WIDTH / 2 - BUCKET_WIDTH / 2, WINDOW_HEIGHT - BUCKET_HEIGHT);
        happyPoints = 0;
        lives = 3;
        currentLevel = 1;

        // Load images
        birdImage = new ImageIcon("bird.png").getImage();
        breadImage = new ImageIcon("bread.png").getImage();
        bucketImage = new ImageIcon("bucket.png").getImage();

        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                breadPosition.setLocation(e.getX() - BREAD_SIZE / 2, e.getY() - BREAD_SIZE / 2);
            }
        });

        spawnBirds(5);

        Timer timer = new Timer(100, e -> {
            moveBirds();
            checkCollisions();
            checkGameOver();
            repaint();
        });
        timer.start();
    }

    private void spawnBirds(int count) {
        Random rand = new Random();
        for (int i = 0; i < count; i++) {
            int x = rand.nextInt(WINDOW_WIDTH - BIRD_SIZE);
            int y = rand.nextInt(WINDOW_HEIGHT - BIRD_SIZE - BUCKET_HEIGHT);
            birds.add(new Point(x, y));
        }
    }

    private void moveBirds() {
        Random rand = new Random();
        for (Point bird : birds) {
            bird.translate(rand.nextInt(5) - 2, rand.nextInt(5) - 2);
            bird.x = Math.max(0, Math.min(bird.x, WINDOW_WIDTH - BIRD_SIZE));
            bird.y = Math.max(0, Math.min(bird.y, WINDOW_HEIGHT - BIRD_SIZE - BUCKET_HEIGHT));
        }
    }

    private void checkCollisions() {
        Rectangle breadBounds = new Rectangle(breadPosition.x, breadPosition.y, BREAD_SIZE, BREAD_SIZE);
        Rectangle bucketBounds = new Rectangle(bucketPosition.x, bucketPosition.y, BUCKET_WIDTH, BUCKET_HEIGHT);

        for (int i = birds.size() - 1; i >= 0; i--) {
            Point bird = birds.get(i);
            Rectangle birdBounds = new Rectangle(bird.x, bird.y, BIRD_SIZE, BIRD_SIZE);

            if (birdBounds.intersects(breadBounds)) {
                birds.remove(i);
                happyPoints += HAPPY_POINTS_PER_BREAD;
            } else if (birdBounds.intersects(bucketBounds)) {
                birds.remove(i);
                lives--;
            }
        }
    }

    private void checkGameOver() {
        if (birds.isEmpty() && lives > 0) {
            currentLevel++;
            spawnBirds(currentLevel + 4); // Increase the number of birds in each level
        } else if (lives == 0) {
            // Game over
            JOptionPane.showMessageDialog(this, "Game Over!\nYour Score: " + happyPoints, "Game Over", JOptionPane.PLAIN_MESSAGE);
            System.exit(0);
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        drawBirds(g);
        drawBread(g);
        drawBucket(g);
        drawHappyPoints(g);
        drawLives(g);
        drawLevel(g);
    }

    private void drawBirds(Graphics g) {
        for (Point bird : birds) {
            g.drawImage(birdImage, bird.x, bird.y, BIRD_SIZE, BIRD_SIZE, this);
        }
    }

    private void drawBread(Graphics g) {
        g.drawImage(breadImage, breadPosition.x, breadPosition.y, BREAD_SIZE, BREAD_SIZE, this);
    }

    private void drawBucket(Graphics g) {
        g.drawImage(bucketImage, bucketPosition.x, bucketPosition.y, BUCKET_WIDTH, BUCKET_HEIGHT, this);
    }

    private void drawHappyPoints(Graphics g) {
        g.setColor(Color.BLACK);
        g.drawString("Happy Points: " + happyPoints, 20, 20);
    }

    private void drawLives(Graphics g) {
        g.setColor(Color.BLACK);
        g.drawString("Lives: " + lives, 20, 40);
    }

    private void drawLevel(Graphics g) {
        g.setColor(Color.BLACK);
        g.drawString("Level: " + currentLevel, 20, 60);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            BirdGame game = new BirdGame();
            game.setVisible(true);
        });
    }
}
